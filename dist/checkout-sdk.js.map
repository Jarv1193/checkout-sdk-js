{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","BillingAddressActionCreator","_requestSender","this","continueAsGuest","credentials","options","_this","store","Observable_","observer","state","getState","checkout","getCheckout","missing_data_error","MissingCheckout","customer","getCustomer","isGuest","standard_error","billingAddressRequestBody","billingAddress","getBillingAddress","country","existingBillingAddressRequestBody","external_tslib_","next","data_store_","billing_address_actions","ContinueAsGuestRequested","_createOrUpdateBillingAddress","id","then","_a","body","ContinueAsGuestSucceeded","complete","catch","response","error","ContinueAsGuestFailed","updateAddress","address","UpdateBillingAddressRequested","email","UpdateBillingAddressSucceeded","UpdateBillingAddressFailed","checkoutId","createAddress","DEFAULT_PARAMS","include","join","BillingAddressRequestSender","timeout","url","headers","Accept","content_type","JsonV1","post","params","put","CountryActionCreator","_countryRequestSender","loadCountries","country_action_types","data","CountryRequestSender","_config","Accept-Language","locale","_super","OrderFinalizationNotRequiredError","type","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","strategy","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","orderId","loadOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","hasFactory","payment_method_types","_isLegacyMethod","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","message","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","internalBillingAddress","is_internal_address_equal","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","createSquareForm","_paymentForm","_getFormOptions","build","paymentName","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","initializationData","callbacks","paymentFormLoaded","postalCode","setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","cardNonceResponseReceived","_cardNonceResponseReceived","NoPaymentDataRequiredPaymentStrategy","orderRequest","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","all","currency","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","subtotal","currencyCode","visaCheckout","visaInitOptions","on","paymentSuccessPayload","_paymentInstrumentSelected","Error","handleSuccess","loadCurrentCheckout","queueId","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","amount","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","endpoint","KlarnaScriptLoader","Klarna","Credit","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","billing_address_action_creator","billing_address_request_sender","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","checkout_action_creator","config_action_creator","config_request_sender","payment_strategy_action_creator","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","wepay_payment_strategy","wepay_risk_client","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","expires_at","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","provider","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","subtype","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","configActionCreator","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","standard_error_StandardError","StandardError","setPrototypeOf","__proto__","_newTarget","captureStackTrace","stack","ConsignmentActionType","CheckoutActionType","OrderActionType","DEFAULT_RESPONSE","RequestError","Array","isArray","reduce","result","joinErrors","detail","title","tslib__WEBPACK_IMPORTED_MODULE_0__","CheckoutButtonSelector","_checkoutButton","lodash__WEBPACK_IMPORTED_MODULE_1__","isDeinitializing","initializeError","getDeinitializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_STATE","checkoutButtonReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","errorsReducer","statusesReducer","reducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","InitializeButtonRequested","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","bindDecorator","target","descriptor","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","set","objectA","objectB","index","length_1","isArrayEqual","isDateEqual","RegExp","toString","isRegExpEqual","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","selectorDecorator","resolver","cache_key_resolver","memoizedMethod","args","getKey","cachedValue","getUsedCount","newValue","is_private","cache","selectorMethodDecorator","mapToInternalCart","decimalPlaces","amountTransformer","amount_transformer","items","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discount","discountAmount","integerAmount","toInteger","discountNotifications","promotions","notifications","promotion","banners","banner","push","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","required","physicalItems","lineItem","isShippingRequired","storeCredit","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","GiftCertificateActionType","PaymentMethodActionType","BillingAddressActionType","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","CheckoutButtonActionType","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","ConfigActionType","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","ACKNOWLEDGE","FINALIZE","__webpack_exports__","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","slice","isMatched","parentMaps_1","maps","CheckoutButtonErrorSelector","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","Button","render","env","commit","shouldProcessPayment","style","shape","label","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","CheckoutButtonStrategy","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","checkoutActionCreator","braintree_paypal_button_strategy","createCheckoutButtonRegistry","mapToInternalLineItems","itemMap","idKey","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","createError","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","dataReducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","downloadsPageUrl","downloadPageUrl","productId","option","addedByPromotion","BillingAddressSelector","continueAsGuestError","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","ConfigSelector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","default","fieldType","itemtype","subdivisions","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","payments","providerType","PaymentMethodSelector","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","CheckoutRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","checkout_actions","order_actions","LoadOrderSucceeded","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","LoadPaymentMethodSucceeded","array","predicate","newArray","mergeOrPush","LoadPaymentMethodsSucceeded","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodFailed","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","getConsignmentByAddress","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","lineItemIds","indexOf","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","isAddressEqual","addressA","addressB","lodash__WEBPACK_IMPORTED_MODULE_0__","normalize","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","LoadShippingOptionsSucceeded","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","_createOrUpdateConsignment","_combineLineItems","rxjs_Observable__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_5__","_getConsignmentRequestBody","_isUpdateConsignmentRequest","itemId","ConsignmentRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","delete","CustomerStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","BraintreeScriptLoader","loadClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","_teardown","mod","CustomerActionCreator","_customerRequestSender","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","find","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","customerStrategyReducer","customer_strategy_actions","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","PaymentMethodInvalidError","isPrivate","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","cartAmount","giftWrapping","CouponActionCreator","_couponRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","PaymentMethodActionCreator","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","sessionHash","PaymentMethodRequestSender","X-API-INTERNAL","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","mapFromInternalAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","ChasePayScriptLoader","JPMC","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","_createSignInButton","not_implemented_error","color","size","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","visibility","containerId","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","createElement","className","innerHTML","appendChild","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","isChasePayUp","insertButtons","containers","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","Content-Type","to_form_url_encoded","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","chasepay_script_loader","default_customer_strategy","customer_action_creator","customer_request_sender","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","TimeoutError","ContentType","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","INTERNAL_USE_ONLY","MissingDataErrorType","MissingDataError","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","Registry","_factories","_instances","_options","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","hasInstance","InvalidArgumentError","PaypalScriptLoader","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","err","createLanguageService","language_service","getEnvironment","process","NODE_ENV","e","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","AmazonPayScriptLoader","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","setClientId","clientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","toFormUrlEncoded","encodeURIComponent","VisaCheckoutScriptLoader","V","RemoteCheckoutSynchronizationError","ConsoleLogger","_console","log","messages","_logToConsole","info","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","String","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","extendedAddress","locality","cardType","lastTwo","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 151);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs/Observable\");","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryRequestSender from './country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        return (paymentMethod && paymentMethod.method === 'multi-option' && !paymentMethod.gateway) ?\n            { ...paymentMethod, gateway: paymentMethod.id } :\n            paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this.hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = payment && payment.gatewayId === 'adyen' ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, { SquareFormElement, SquareFormOptions } from './square-form';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _paymentForm?: SquarePaymentForm;\n    private _deferredRequestNonce?: DeferredPromise;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const paymentName = payment.methodId;\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        })\n        .then(paymentData => {\n            const paymentPayload = {\n                methodId: paymentName,\n                paymentData,\n            };\n\n            return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload))\n                );\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!squareOptions || !paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        return {\n            ...squareOptions,\n            ...paymentMethod.initializationData,\n            callbacks: {\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n\n                    const state = this._store.getState();\n                    const billingAddress = state.billingAddress.getBillingAddress();\n\n                    if (!this._paymentForm) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (billingAddress && billingAddress.postalCode) {\n                        this._paymentForm.setPostalCode(billingAddress.postalCode);\n                    }\n                },\n                unsupportedBrowserDetected: () => {\n                    deferred.reject(new UnsupportedBrowserError());\n                },\n                cardNonceResponseReceived: (errors, nonce) => {\n                    this._cardNonceResponseReceived(errors, nonce);\n                },\n            },\n        };\n    }\n\n    private _cardNonceResponseReceived(errors: any, nonce: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors) {\n            this._deferredRequestNonce.reject(errors);\n        } else {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n\n/**\n * A set of options that are required to initialize the Square payment method.\n *\n * Once Square payment is initialized, credit card form fields, provided by the\n * payment provider as iframes, will be inserted into the current page. These\n * options provide a location and styling for each of the form fields.\n */\nexport interface SquarePaymentInitializeOptions {\n    /**\n     * The location to insert the credit card number form field.\n     */\n    cardNumber: SquareFormElement;\n\n    /**\n     * The location to insert the CVV form field.\n     */\n    cvv: SquareFormElement;\n\n    /**\n     * The location to insert the expiration date form field.\n     */\n    expirationDate: SquareFormElement;\n\n    /**\n     * The location to insert the postal code form field.\n     */\n    postalCode: SquareFormElement;\n\n    /**\n     * The CSS class to apply to all form fields.\n     */\n    inputClass?: string;\n\n    /**\n     * The set of CSS styles to apply to all form fields.\n     */\n    inputStyles?: Array<{ [key: string]: string }>;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            new BillingAddressActionCreator(\n                new BillingAddressRequestSender(requestSender)\n            ),\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            new CheckoutActionCreator(\n                checkoutRequestSender,\n                new ConfigActionCreator(new ConfigRequestSender(requestSender))\n            ),\n            paymentMethodActionCreator,\n            new PaymentStrategyActionCreator(registry, orderActionCreator),\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({}, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { setPrototypeOf } from '../../utility';\n\nexport default class StandardError extends Error {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: Action\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","module.exports = require(\"rxjs/observable/defer\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","module.exports = require(\"rxjs/observable/from\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","module.exports = require(\"@bigcommerce/form-poster\");","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     braintreepaypal: {\n     *         container: '#checkoutButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Observable<InitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n            defer(() => this._registry.get(options.methodId).initialize(options)\n                .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n        );\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize(options)\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, paypalOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize(options);\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized = false;\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host: options && options.host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { BraintreePaypalButtonStrategy, CheckoutButtonStrategy } from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy> {\n    const registry = new Registry<CheckoutButtonStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster()\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster(),\n            true\n        )\n    );\n\n    return registry;\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","module.exports = require(\"rxjs/observable/merge\");","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find, map } from 'lodash';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._combineLineItems(\n                    consignment,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: ['consignments.availableShippingOptions'],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _combineLineItems(\n        consignment: ConsignmentAssignmentRequestBody,\n        existingConsignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!existingConsignment) {\n            return consignment.lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const existingLineItems = map(existingConsignment.lineItemIds, itemId => {\n            const item = find(cart.lineItems.physicalItems, { id: itemId });\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        }) as ConsignmentLineItem[];\n\n        return existingLineItems.concat(consignment.lineItems);\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n} from './strategies';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(getScriptLoader(), requestSender),\n            new VisaCheckoutScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(getScriptLoader()),\n            requestSender,\n            createFormPoster()\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender)\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token: string = this._options.defaultToken, cacheToken: string = token): T {\n        try {\n            return this._getInstance(token, cacheToken);\n        } catch (error) {\n            return this._getInstance(this._options.defaultToken, cacheToken);\n        }\n    }\n\n    register(token: string, factory: Factory<T>): void {\n        if (this.hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this.hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","module.exports = require(\"rxjs/observable/empty\");","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"messageformat\");","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}
