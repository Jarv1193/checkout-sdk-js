{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-types.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-types.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","standard_error_StandardError","_super","StandardError","message","_this","this","type","setPrototypeOf","__proto__","_newTarget","Error","captureStackTrace","stack","external_tslib_","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","GiftCertificateActionType","PaymentMethodActionType","BillingAddressActionType","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","CheckoutButtonActionType","INITIALIZE_REMOTE_BILLING_REQUESTED","INITIALIZE_REMOTE_BILLING_SUCCEEDED","INITIALIZE_REMOTE_BILLING_FAILED","INITIALIZE_REMOTE_SHIPPING_REQUESTED","INITIALIZE_REMOTE_SHIPPING_SUCCEEDED","INITIALIZE_REMOTE_SHIPPING_FAILED","INITIALIZE_REMOTE_PAYMENT_REQUESTED","INITIALIZE_REMOTE_PAYMENT_SUCCEEDED","INITIALIZE_REMOTE_PAYMENT_FAILED","LOAD_REMOTE_SETTINGS_REQUESTED","LOAD_REMOTE_SETTINGS_SUCCEEDED","LOAD_REMOTE_SETTINGS_FAILED","SIGN_OUT_REMOTE_CUSTOMER_REQUESTED","SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED","SIGN_OUT_REMOTE_CUSTOMER_FAILED","UPDATE_REMOTE_CHECKOUT","ConfigActionType","BillingAddressActionCreator","_requestSender","continueAsGuest","credentials","options","store","Observable_","observer","state","getState","checkout","getCheckout","missing_data_error","MissingCheckout","customer","getCustomer","isGuest","standard_error","billingAddressRequestBody","billingAddress","getBillingAddress","country","existingBillingAddressRequestBody","next","data_store_","billing_address_actions","ContinueAsGuestRequested","_createOrUpdateBillingAddress","id","then","_a","body","ContinueAsGuestSucceeded","complete","catch","response","error","ContinueAsGuestFailed","updateAddress","address","UpdateBillingAddressRequested","email","UpdateBillingAddressSucceeded","UpdateBillingAddressFailed","checkoutId","createAddress","DEFAULT_PARAMS","include","join","BillingAddressRequestSender","timeout","url","headers","Accept","content_type","JsonV1","post","params","put","CountryActionCreator","_countryRequestSender","loadCountries","country_action_types","data","CountryRequestSender","_config","Accept-Language","locale","OrderFinalizationNotRequiredError","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","strategy","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","orderId","loadOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","hasFactory","payment_method_types","_isLegacyMethod","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","internalBillingAddress","is_internal_address_equal","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","initializationData","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","handleSuccess","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","endpoint","KlarnaScriptLoader","Klarna","Credit","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","billing_address_action_creator","billing_address_request_sender","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","wepay_payment_strategy","wepay_risk_client","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","expires_at","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","subtype","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","LOAD_SHIPPING_COUNTRIES_REQUESTED","LOAD_SHIPPING_COUNTRIES_SUCCEEDED","LOAD_SHIPPING_COUNTRIES_FAILED","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","__webpack_exports__","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","CacheKeyResolver","_lastId","_maps","getKey","args","_resolveMap","index","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","push","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","Button","render","env","commit","shouldProcessPayment","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","CheckoutButtonStrategy","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","createCheckoutButtonRegistry","CheckoutActionType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","tslib__WEBPACK_IMPORTED_MODULE_0__","createError","CheckoutButtonSelector","lodash__WEBPACK_IMPORTED_MODULE_1__","initializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","OrderActionType","DEFAULT_RESPONSE","RequestError","Array","isArray","reduce","result","joinErrors","detail","title","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","keys","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","mapGiftCertificateToInternalLineItem","amountTransformer","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","productId","option","addedByPromotion","BillingAddressSelector","continueAsGuestError","createFreezeProxy","target","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","forEach","charAt","createProxy","ConfigSelector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","storeCredit","payments","providerType","PaymentMethodSelector","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","bindDecorator","descriptor","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","set","objectA","objectB","length_1","isArrayEqual","isDateEqual","RegExp","toString","isRegExpEqual","keyFilter","keysA","keysB","length_2","isObjectEqual","selectorDecorator","resolver","cache_key_resolver","memoizedMethod","cachedValue","newValue","is_private","cache","selectorMethodDecorator","mapToInternalCart","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotions","notifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","CheckoutRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","checkout_actions","order_actions","LoadOrderSucceeded","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","LoadPaymentMethodSucceeded","array","predicate","newArray","mergeOrPush","LoadPaymentMethodsSucceeded","LoadPaymentMethodsRequested","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodFailed","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_action_types","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","getConsignmentByAddress","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","lineItemIds","indexOf","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","isAddressEqual","addressA","addressB","lodash__WEBPACK_IMPORTED_MODULE_0__","normalize","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","LoadShippingOptionsSucceeded","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","LoadShippingOptionsRequested","LoadShippingOptionsFailed","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","UpdateShippingOptionRequested","UpdateShippingOptionFailed","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_action_types__WEBPACK_IMPORTED_MODULE_2__","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","_createOrUpdateConsignment","_combineLineItems","rxjs_Observable__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_5__","_getConsignmentRequestBody","_isUpdateConsignmentRequest","itemId","ConsignmentRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","delete","CustomerStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","BraintreeScriptLoader","loadClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","_teardown","mod","CustomerActionCreator","_customerRequestSender","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","find","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","customerStrategyReducer","customer_strategy_actions","PaymentMethodInvalidError","isPrivate","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","cartAmount","giftWrapping","CouponActionCreator","_couponRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","PaymentMethodActionCreator","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","sessionHash","PaymentMethodRequestSender","X-API-INTERNAL","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","mapFromInternalAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","ChasePayScriptLoader","JPMC","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","_createSignInButton","not_implemented_error","color","size","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","visibility","containerId","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","createElement","className","innerHTML","appendChild","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","isChasePayUp","insertButtons","containers","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","chasepay_script_loader","square_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","TimeoutError","ContentType","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","INTERNAL_USE_ONLY","MissingDataErrorType","MissingDataError","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","Registry","_factories","_instances","_options","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","hasInstance","InvalidArgumentError","PaypalScriptLoader","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","err","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","format","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","getEnvironment","process","NODE_ENV","e","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_action_types__WEBPACK_IMPORTED_MODULE_2__","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","clientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","toFormUrlEncoded","encodeURIComponent","VisaCheckoutScriptLoader","V","RemoteCheckoutSynchronizationError","ConsoleLogger","_console","log","messages","_logToConsole","info","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","extendedAddress","locality","cardType","lastTwo","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 152);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","import { setPrototypeOf } from '../../utility';\n\nexport default class StandardError extends Error {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","module.exports = require(\"rxjs/Observable\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","export const INITIALIZE_REMOTE_BILLING_REQUESTED = 'INITIALIZE_REMOTE_BILLING_REQUESTED';\nexport const INITIALIZE_REMOTE_BILLING_SUCCEEDED = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_BILLING_FAILED = 'INITIALIZE_REMOTE_BILLING_FAILED';\n\nexport const INITIALIZE_REMOTE_SHIPPING_REQUESTED = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED';\nexport const INITIALIZE_REMOTE_SHIPPING_SUCCEEDED = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED';\nexport const INITIALIZE_REMOTE_SHIPPING_FAILED = 'INITIALIZE_REMOTE_SHIPPING_FAILED';\n\nexport const INITIALIZE_REMOTE_PAYMENT_REQUESTED = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED';\nexport const INITIALIZE_REMOTE_PAYMENT_SUCCEEDED = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED';\nexport const INITIALIZE_REMOTE_PAYMENT_FAILED = 'INITIALIZE_REMOTE_PAYMENT_FAILED';\n\nexport const LOAD_REMOTE_SETTINGS_REQUESTED = 'LOAD_REMOTE_SETTINGS_REQUESTED';\nexport const LOAD_REMOTE_SETTINGS_SUCCEEDED = 'LOAD_REMOTE_SETTINGS_SUCCEEDED';\nexport const LOAD_REMOTE_SETTINGS_FAILED = 'LOAD_REMOTE_SETTINGS_FAILED';\n\nexport const SIGN_OUT_REMOTE_CUSTOMER_REQUESTED = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED';\nexport const SIGN_OUT_REMOTE_CUSTOMER_FAILED = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED';\n\nexport const UPDATE_REMOTE_CHECKOUT = 'UPDATE_REMOTE_CHECKOUT';\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryRequestSender from './country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        return (paymentMethod && paymentMethod.method === 'multi-option' && !paymentMethod.gateway) ?\n            { ...paymentMethod, gateway: paymentMethod.id } :\n            paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this.hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = payment && payment.gatewayId === 'adyen' ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport { createBraintreePaymentProcessor, createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from './strategies/braintree';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            new BillingAddressActionCreator(\n                new BillingAddressRequestSender(requestSender)\n            ),\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({}, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","export const LOAD_SHIPPING_COUNTRIES_REQUESTED = 'LOAD_SHIPPING_COUNTRIES_REQUESTED';\nexport const LOAD_SHIPPING_COUNTRIES_SUCCEEDED = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED';\nexport const LOAD_SHIPPING_COUNTRIES_FAILED = 'LOAD_SHIPPING_COUNTRIES_FAILED';\n","module.exports = require(\"rxjs/observable/defer\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","module.exports = require(\"rxjs/observable/from\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","module.exports = require(\"@bigcommerce/form-poster\");","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: string): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: string): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     braintreepaypal: {\n     *         container: '#checkoutButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Observable<InitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n            defer(() => this._registry.get(options.methodId).initialize(options)\n                .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n        );\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize(options)\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, paypalOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize(options);\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized = false;\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Promise<void> {\n        this._isInitialized = false;\n\n        return Promise.resolve();\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host: options && options.host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { BraintreePaypalButtonStrategy, CheckoutButtonStrategy } from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy> {\n    const registry = new Registry<CheckoutButtonStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster()\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            createFormPoster(),\n            true\n        )\n    );\n\n    return registry;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: string): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: string): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: Action\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T extends object>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { AfterpayRemoteCheckout, AmazonPayRemoteCheckout } from './methods';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\ntype RemoteCheckout = AfterpayRemoteCheckout | AmazonPayRemoteCheckout;\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: Action\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = {},\n    action: Action\n): RemoteCheckout {\n    switch (action.type) {\n    case actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED:\n        return { ...data, billing: action.payload.billing };\n\n    case actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED:\n        return { ...data, shipping: action.payload.shipping };\n\n    case actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED:\n        return { ...data, settings: action.payload };\n\n    case actionTypes.UPDATE_REMOTE_CHECKOUT:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function shippingCountryReducer(state: ShippingCountryState = DEFAULT_STATE, action: Action): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: ShippingCountryErrorsState = DEFAULT_STATE.errors, action: Action): ShippingCountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses, action: Action): ShippingCountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","module.exports = require(\"rxjs/observable/merge\");","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find, map } from 'lodash';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._combineLineItems(\n                    consignment,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: ['consignments.availableShippingOptions'],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _combineLineItems(\n        consignment: ConsignmentAssignmentRequestBody,\n        existingConsignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!existingConsignment) {\n            return consignment.lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const existingLineItems = map(existingConsignment.lineItemIds, itemId => {\n            const item = find(cart.lineItems.physicalItems, { id: itemId });\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        }) as ConsignmentLineItem[];\n\n        return existingLineItems.concat(consignment.lineItems);\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.15.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './shipping-country-action-types';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_REQUESTED));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_SHIPPING_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_SHIPPING_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { createBraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n} from './strategies';\nimport SquareCustomerStrategy from './strategies/square-customer-strategy';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(getScriptLoader(), requestSender),\n            new VisaCheckoutScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(getScriptLoader()),\n            requestSender,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender)\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token: string = this._options.defaultToken, cacheToken: string = token): T {\n        try {\n            return this._getInstance(token, cacheToken);\n        } catch (error) {\n            return this._getInstance(this._options.defaultToken, cacheToken);\n        }\n    }\n\n    register(token: string, factory: Factory<T>): void {\n        if (this.hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this.hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","module.exports = require(\"rxjs/observable/empty\");","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"messageformat\");","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport * as actionTypes from './remote-checkout-action-types';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_BILLING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_BILLING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_SHIPPING_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.INITIALIZE_REMOTE_PAYMENT_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(actionTypes.LOAD_REMOTE_SETTINGS_SUCCEEDED, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_REMOTE_SETTINGS_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_REQUESTED, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.SIGN_OUT_REMOTE_CUSTOMER_FAILED, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(actionTypes.UPDATE_REMOTE_CHECKOUT, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}
